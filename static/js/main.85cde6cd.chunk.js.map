{"version":3,"sources":["modules/Constants.js","modules/Utils.js","modules/CountyStats.js","modules/DualColorScale.js","components/Map.js","components/ColorLegend.js","components/MapContainer.js","modules/DataService.js","components/ControlPanel.js","components/CovidTimeLine.js","App.js","index.js"],"names":["COUNTY_MAP_VARS","AGGREGATION_LEVELS","Utils","x","Math","abs","sign","log","arr","total","length","sortedArray","slice","sort","parseInt","lower","dataGroup","accessor","aggregator","weightAccessor","values","counties","dataPoint","dataVal","undefined","push","toString","replace","obj","constructor","Object","keys","item","targetArray","mapType","constants","newArray","arrays","concat","filter","includes","Array","isArray","string","str","toUpperCase","toLowerCase","unCamelCase","stringArray","activeLabel","stepSize","markArray","val","label","newEntry","value","index","entry","d","func","error_string","err","console","a1","a2","idx","start","stop","nSteps","vals","currVal","CountyStats","props","this","key","date","getVarConfig","scaler","labelFormatter","name","w","getNetDemVotes","getCountyPopulation","v","sum","toFixed","getMedianIncome","numberWithCommas","getUnemploymentPct","getLowEducationPct","getURMPct","getTweetCount","covidData","bind","config","totalWeights","getGroupCounties","county","newVal","weight","startDate","endDate","perCapita","countyCovidChange","data","cvap","county_name","cgData","netClinton","parseFloat","net_dem_president_votes","netDemGov","net_dem_gov_votes","votes","isNaN","median_hh_inc","lesshs_pct","urm_pct","GEOID","clf_unemploy_pct","tweet_users","parent","groupId","covid","countyPoint","totalCVAP","income","map","mean","tweets","dates","diffs","diff","netVotes","pVar","sVar","tVar","getCountyName","vars","additionalToolTipVars","additionalVar","indexOf","getGroupAccessor","active","inverse","getCountyGroup","DualColorScale","groupData","primaryVar","secondaryVar","tertiaryVar","emptyObject","activePrimary","activeSecondary","activeTertiary","stateId","primarySingleAccessor","getAccessor","secondarySingleAccessor","tertiarySingleAccessor","primaryGroupAccessor","secondaryGroupAccessor","tertiaryGroupAccessor","scaleRanges","arrange","colorRanges","primaryScale","getQuantileScale","secondaryScale","tertiaryScale","populationScale","getPowerScale","countyGroupPopulation","primaryInterpolator","d3","secondaryInterpolator","glyphScale","makeInterpolator","tertiaryInterpolator","patternScale","hue","hue2","s","l","h","exponent","transform","max","scale","domain","range","powerTransform","nQuantiles","quantiles","quantile","pVal","sVal","pQuant","primaryVal","interpolateFill","secondaryVal","backgroundColor","getGroupColor","tVal","toTexture","getCountyColor","bColor","size","tColor","texture","textures","lines","orientation","stroke","strokeWidth","background","pop","scaleRadius","valueQuant","populationQuant","node","Map","state","zoomedToId","currentTransform","activeCountyGroups","dataAccessor","colorProps","bordersDrawn","glyphsDrawn","setState","selectAll","remove","height","clientHeight","width","clientWidth","svg","append","attr","style","on","handleRightClick","min","g","zoom","zoomed","call","projection","translate","path","wrapError","drawBorders","colorBoundaries","drawGlyphs","aggregateCountys","drawCountyGroupBorders","drawSingleCountys","enter","i","features","exit","countyData","parentId","currCountys","getCountyGeoid","colorScale","getColor","onClick","handleSingleCountyClick","onMouseOver","handleSingleCountyMouseOver","onMouseOut","handleSingleCountyMouseOut","getGroupId","getParentCountyGroup","activeStrokeWidth","handleCountyGroupClick","handleGroupMouseOver","handleGroupMouseOut","getStroke","patterns","getTexture","getGroupTexture","getCountyTexture","forEach","t","url","strokeColor","glyphsActive","getCentroid","getGlyphColor","getGlyphRadius","handleGlyphClick","handleGlyphMouseOver","handleGlyphMouseOut","raise","countyGroup","toggleActiveCountyGroups","getSingleCountyToolTip","mapDate","mapVar","getGroupToolTip","target","select","currRadius","getAttribute","bbox","getBoundingClientRect","svgRect","ttip","right","left","top","html","singleTTip","event","preventDefault","groupTTip","geoid","create","_rootNode","prevProps","shouldDrawBorders","shouldDrawGlyphs","destroy","componentNode","className","ref","_setRef","id","React","Component","defaultProps","spikeWidth","spikeStrokeWidth","maxSpikeHeight","spikeHeightScaleExp","ColorLegend","primaryTitle","secondaryTitle","tertiaryTitle","refs","rootNode","primarySvg","primaryLegend","legendTitleSpace","secondarySvg","secondaryLegend","tertiarySvg","tertiaryLegend","draw","newScale","oldScale","cs","cleanSvg","drawPrimaryLegend","drawSecondaryLegend","drawTertiaryLegend","toTitle","pStopY","getLegend","ticks","reduceTicks","stopY","calcDims","barHeight","barWidth","yScale","radius","cx","xMargin","getY","formatter","text","tStopY","pTicks","patternBackground","tTicks","tTick","p","nTickSteps","newTicks","startY","barSpacing","textWidth","maxBarHeight","maxBarWidth","heights","reverse","varType","getFill","legendFormatter","yMargin","Grid","container","mt","xs","legendMargin","MapContainer","spikeColors","defaultSpikeConfig","direction","toggleLoading","dataService","fill","fillOpacity","strokeOpacity","DataService","args","cache","maxCovid","preloadCache","testData","useCache","availableDates","a","b","Date","parse","fetch","mapData","json","getMapData","then","res","getAvailableDates","covidPerCapita","groupCovidData","maxVal","covidValues","ControlPanel","here","mapVarDropDown","validMapVars","MenuItem","disabled","Boolean","secondaryVarDropDown","tertiaryVarDropDown","aggregateDropDown","AppBar","color","spacing","justify","align-items","FormControl","Select","renderValue","handleMapVarChange","FormHelperText","handleSecondaryVarChange","handleTertiaryVarChange","aggregationLevel","toggleAggregateCountys","ButtonGroup","Button","variant","resetActiveCountys","setAllCountiesActive","setupData","activeGroups","flattenedData","y","arrayEqual","propKey","secondaryAccessor","rates","refValues","population","points","newPoint","x1","x2","xMin","xMax","yMin","nPoints","smoothedPoints","windowWidth","windowStart","windowEnd","window","totalPop","xVar","margin","marginTop","rectPadding","covidVar","App","test","defaultMapVar","defaultSecondaryVar","defaultTertiaryVar","mapIsLoaded","validVars","itemInArray","clickedGroup","splice","aggregateFlag","allCountyGroups","newValue","newDate","boolFlag","tempData","CssBaseline","m","Typography","align","gutterBottom","Slider","defaultValue","marks","markify","step","valueLabelDisplay","onChange","handleSliderChange","Backdrop","open","invisible","CircularProgress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85cde6cd.chunk.js","sourcesContent":["export const COUNTY = 'county';\r\nexport const DISTRICT = 'district';\r\nexport const COVID = 'covid';\r\nexport const TWEETS = 'tweets';\r\nexport const STATE = 'states';\r\n\r\nexport const COUNTY_MAP_VARS = ['none','population','voting','income', 'lowEducation', 'unemployment','underRepresentedMinorities', 'tweetsPerCapita','casesPerCapita','deathsPerCapita']\r\nexport const TIME_SENSITIVE_VARS = ['cases','deaths','tweets','casesPerCapita','deathsPerCapita','tweetsPerCapita'];\r\nexport const AGGREGATION_LEVELS = ['groups', 'countys'];\r\nexport const API_URL = 'http://localhost:5000/';","import * as constants from './Constants';\r\n\r\nexport default class Utils {\r\n\r\n    static signedLog(x){\r\n        if(Math.abs(x) < 1){\r\n            return x\r\n        }\r\n        return Math.sign(x)*Math.log(Math.abs(x));\r\n    }\r\n\r\n    static sum(arr){\r\n        let total = 0;\r\n        for(var val of arr){\r\n            total += val;\r\n        }\r\n        return total\r\n    }\r\n\r\n    static mean(arr){\r\n        let total = 0;\r\n        for(var val of arr){\r\n            total += val;\r\n        }\r\n        return total/arr.length\r\n    }\r\n\r\n    static median(arr){\r\n        let sortedArray = arr.slice();\r\n        sortedArray.sort();\r\n        if(sortedArray.length === 1){\r\n            return sortedArray[0]\r\n        }\r\n        else if(sortedArray.length%2 !== 0){\r\n            return sortedArray[parseInt(sortedArray.length/2)]\r\n        } else{\r\n            let lower = parseInt(sortedArray.length/2);\r\n            return (sortedArray[lower] + sortedArray[lower+1])/2\r\n        }\r\n    }\r\n\r\n    static aggregateValues(dataGroup, accessor, aggregator, weightAccessor){\r\n        //helper function to aggregate values accross county groups\r\n        //data is a single county group {'counties':[{data},{data}], ...}, accessor gets a single value, aggregator is like sum/mean\r\n        //weightAccessor is a secondary accessor for like population if we want to weight the sums\r\n        var values = [];\r\n        for(var dataPoint of dataGroup.counties){\r\n            let dataVal = accessor(dataPoint);\r\n            if(weightAccessor !== undefined){\r\n                dataVal = dataVal*weightAccessor(dataPoint);\r\n            }\r\n            values.push(dataVal)\r\n        }\r\n        var finalValue = aggregator(values);\r\n        return finalValue\r\n    }\r\n\r\n    static numberWithCommas(x){\r\n\r\n        //from https://stackoverflow.com/a/2901298\r\n        //should add commas to a number in thousands place?\r\n        return x.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    static emptyObject(obj){\r\n        //checks if something is == {}, bascially\r\n        try{\r\n            var flag = (obj.constructor === Object && Object.keys(obj).length === 0);\r\n            return flag\r\n        } catch{\r\n            return false\r\n        }\r\n    }\r\n\r\n    static itemInArray(item, targetArray){\r\n        for(let target of targetArray){\r\n            if(item === target){\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    static validMapVars(mapType){\r\n        return constants.COUNTY_MAP_VARS\r\n    }\r\n\r\n    static arrayUnions(...arrays){\r\n        //should, in theory, join a list of arrays.  May not work\r\n        var newArray = [];\r\n        if(arrays.length === 1){\r\n            return arrays[0];\r\n        }\r\n        for(var arr in arrays){\r\n            newArray.concat( arr[1].filter(x => (!newArray.includes(x)) ));\r\n        }\r\n        return newArray\r\n    }\r\n\r\n    static isObject(item) {\r\n        return (item && typeof item === 'object' && !Array.isArray(item));\r\n    }\r\n\r\n    static unCamelCase(string){\r\n        //converts camelCase to Camel Case.  For like, showing names\r\n        //taken from https://stackoverflow.com/a/6229124\r\n        try{\r\n            var newString = string.replace(/([a-z])([A-Z])/g, '$1 $2')  //insert spaces\r\n                .replace(/\\b([A-Z]+)([A-Z])([a-z])/, '$1 $2$3') //space before last upper in a sequence fellowed by lower\r\n                .replace(/^./, function(str){ return str.toUpperCase(); });  //uppercase first character\r\n            return newString\r\n        }catch{\r\n            return ''\r\n        }\r\n    }\r\n\r\n    static unSnakeCase(string){\r\n        //should convert snake-case to Snake Case.  untested. based on unCamelCase\r\n        try{\r\n            var newString = string.toLowerCase()\r\n                .replace(/([a-z])-([a-z])/g, '$1 $2') \r\n                .replace(/^./, function(str){ return str.toUpperCase(); });\r\n            return newString;\r\n        } catch{\r\n            return '';\r\n        }\r\n    }\r\n\r\n    static formatPercent(string){\r\n        return Utils.unCamelCase(string+'PerCapita')\r\n    }\r\n\r\n    static markify(stringArray, activeLabel){\r\n        //converts array of things to a discrete format to use in sliders and maybe other stuff\r\n        let stepSize = 100/(stringArray.length - 1);\r\n        let currStep = 0;\r\n        var markArray = [];\r\n        for(var val in stringArray){\r\n            let label = stringArray[val]\r\n            if(activeLabel !== undefined){\r\n                label = (label === activeLabel)? label: '';\r\n            }\r\n            let newEntry = {\r\n                value: val,\r\n                label: label\r\n            }\r\n            markArray.push(newEntry)\r\n            currStep = currStep + stepSize;\r\n        }\r\n        return markArray;\r\n    }\r\n\r\n    static markifiedLabelLookup(index, markArray){\r\n        //take an array from markify and maps an index to a value, for the slider\r\n        var entry = markArray.filter(d => d.value === index);\r\n        entry = entry[0].label;\r\n        return entry\r\n    }\r\n\r\n    static wrapError(func, error_string){\r\n        try{\r\n            func();\r\n        } catch(err){\r\n            console.log(error_string);\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    static arrayEqual(a1, a2){\r\n        if(a1.length !== a2.length){\r\n            return false\r\n        }\r\n        for(let idx in a1){\r\n            if(a1[idx] !== a2){\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    // static quantiles(arr, nQuantiles){\r\n    //     nQuantiles = Math.min(arr.length-1, nQuantiles)\r\n    //     let vals = arr.slice()\r\n    //     vals.sort();\r\n    //     var quantiles = [];\r\n    //     let stepSize = vals.length/(nQuantiles-1);\r\n    //     var currPos = 0;\r\n    //     while(currPos < vals.length-stepSize){\r\n    //         quantiles.push(vals[parseInt(currPos)]);\r\n    //         currPos += stepSize\r\n    //     }\r\n    //     quantiles.push(vals[vals.length-1])\r\n    //     return quantiles\r\n    // }\r\n\r\n    static arrange(start, stop, nSteps){\r\n        let stepSize = (stop - start)/(nSteps-1);\r\n        let vals = [];\r\n        let currVal = start;\r\n        while(currVal < stop){\r\n            vals.push(currVal);\r\n            currVal += stepSize;\r\n        }\r\n        vals.push(stop)\r\n        return vals\r\n    }\r\n}","// import * as constants from './Constants';\r\nimport Utils from './Utils';\r\nimport { mean, sum } from 'simple-statistics';\r\n\r\nexport default class CountyStats {\r\n\r\n    constructor(props){\r\n        this.props = props\r\n    }\r\n\r\n    static getAccessor(key, date){\r\n        var config = CountyStats.getVarConfig(key,date);\r\n        return config.accessor\r\n    }\r\n\r\n    static getVarConfig(key, date){\r\n        var accessor;//get data from a single county object\r\n        var scaler; //scale the data when whe show it\r\n        var aggregator; //how to aggregate given an array of values and weights for county Groups\r\n        var weightAccessor; //how to weight counties when aggregating\r\n        var labelFormatter; //formats the return value for display\r\n        var name;\r\n        switch(key){\r\n            case 'none':\r\n                name = 'NA';\r\n                accessor = d=>0;\r\n                scaler = d=>d;\r\n                weightAccessor = d=>1;\r\n                aggregator = (d,w) => 1;\r\n                labelFormatter = (d) => '';\r\n                break;\r\n            case 'voting':\r\n                name='Net Part Votes/Person'\r\n                accessor = d=> CountyStats.getNetDemVotes(d)/CountyStats.getCountyPopulation(d);\r\n                scaler = d=>d;\r\n                weightAccessor = CountyStats.getCountyPopulation;\r\n                aggregator = (v,w) => { return Utils.sum(v)/Utils.sum(w); } //weighted mean by population\r\n                labelFormatter = function(d){\r\n                    d = (100*d).toFixed(0);\r\n                    if(d > 0){\r\n                        return d + '% (D)'\r\n                    } else{\r\n                        return Math.abs(d) + '% (R)'\r\n                    }\r\n                }\r\n                break;\r\n            case 'income':\r\n                name = 'Median Income';\r\n                accessor = CountyStats.getMedianIncome;\r\n                scaler = Math.log;\r\n                aggregator = (v,w) => { return Utils.sum(v)/Utils.sum(w); }\r\n                weightAccessor = CountyStats.getCountyPopulation;\r\n                labelFormatter = (d) => \"$\" + Utils.numberWithCommas(d.toFixed(0));\r\n                break;\r\n            case 'population':\r\n                name = 'Population (18+)';\r\n                accessor = CountyStats.getCountyPopulation;\r\n                scaler = Math.log;\r\n                aggregator = (v,w) => { return Utils.sum(v); }\r\n                weightAccessor = d => 1;\r\n                labelFormatter = (d) => Utils.numberWithCommas(d.toFixed(0));\r\n                break;\r\n            case 'unemployment':\r\n                name = 'Unemployment';\r\n                accessor = CountyStats.getUnemploymentPct;\r\n                scaler = d=>d**.25;\r\n                aggregator = (v,w) => { return Utils.sum(v)/Utils.sum(w); }\r\n                weightAccessor = CountyStats.getCountyPopulation;\r\n                labelFormatter = (d) => d.toFixed(1) + '%'\r\n                break;\r\n            case 'lowEducation':\r\n                name = '% W/0 HS Degree';\r\n                accessor = CountyStats.getLowEducationPct;\r\n                scaler = d=>d**.25;\r\n                aggregator = aggregator = (v,w) => { return Utils.sum(v)/Utils.sum(w); }\r\n                weightAccessor = CountyStats.getCountyPopulation;\r\n                labelFormatter = (d) => d.toFixed(1) + '%'\r\n                break;\r\n            case 'underRepresentedMinorities':\r\n                name = '% Black/Hispanc';\r\n                accessor = CountyStats.getURMPct;\r\n                scaler = d=>d**.25;\r\n                aggregator = (v,w) => { return Utils.sum(v)/Utils.sum(w); }\r\n                weightAccessor = CountyStats.getCountyPopulation;\r\n                labelFormatter = (d) => d.toFixed(1) + '%';\r\n                break;\r\n            case 'tweets':\r\n                name = 'Unique Twitter Users';\r\n                accessor = CountyStats.getTweetCount;\r\n                scaler = d=> d**.25;\r\n                //just get total tweets\r\n                aggregator  = (v,w) => { return Utils.sum(v); }\r\n                weightAccessor = d=>1;\r\n                labelFormatter = (d) => Utils.numberWithCommas(d) + ' users';\r\n                break;\r\n            case 'tweetsPerCapita':\r\n                name = 'Unique Twitter User';\r\n                accessor = function(d){\r\n                    var tweets = CountyStats.getTweetCount(d);\r\n                    var pop = CountyStats.getCountyPopulation(d);\r\n                    return tweets/pop;\r\n                };\r\n                scaler = d=> d**.25;\r\n                aggregator = (v,w) => { return Utils.sum(v)/Utils.sum(w); }\r\n                weightAccessor = CountyStats.getCountyPopulation;\r\n                labelFormatter = (d) => (1000000*d).toFixed(0) + '/1M';\r\n                break;\r\n            case 'cases':\r\n                name = 'Confirmed Cases';\r\n                accessor = d => CountyStats.covidData(d,'cases',date);\r\n                scaler = d=>d**.25;\r\n                aggregator = (v,w) => { return Utils.sum(v); }\r\n                weightAccessor = d=>1;\r\n                labelFormatter = (d) => Utils.numberWithCommas(d) + ' cases';\r\n                break;\r\n            case 'casesPerCapita':\r\n                name = 'Confirmed Cases';\r\n                accessor = function(d){\r\n                    let val = CountyStats.covidData(d,'cases',date)\r\n                    var pop = CountyStats.getCountyPopulation(d);\r\n                    return 100*val/pop\r\n                }.bind(date);\r\n                scaler = d=>d**.25;\r\n                aggregator = (v,w) => { return Utils.sum(v)/Utils.sum(w); }\r\n                weightAccessor = CountyStats.getCountyPopulation;\r\n                labelFormatter = (d) => (10000*d).toFixed(1) + '/10K';\r\n                break;\r\n            case 'deaths':\r\n                name = 'Confirmed Deaths';\r\n                accessor = d => CountyStats.covidData(d,'deaths',date);\r\n                scaler = d=>d**.25;\r\n                aggregator = (v,w) => { return Utils.sum(v); }\r\n                weightAccessor = d=>1;\r\n                labelFormatter = (d) => Utils.numberWithCommas(d) + ' deaths';\r\n                break\r\n            case 'deathsPerCapita':\r\n                name = 'Confirmed Deaths'\r\n                accessor = function(d){\r\n                    let val = CountyStats.covidData(d,'deaths',date)\r\n                    var pop = CountyStats.getCountyPopulation(d);\r\n                    return 100*val/pop\r\n                }.bind(date);\r\n                scaler = d=>d**.25;\r\n                aggregator = (v,w) => { return Utils.sum(v)/Utils.sum(w); }\r\n                weightAccessor = CountyStats.getCountyPopulation;\r\n                labelFormatter = (d) => (10000*d).toFixed(1) + '/10K';\r\n                break\r\n            default:\r\n                name = 'NA';\r\n                accessor = d=>.1;\r\n                scaler = d=>d;\r\n                aggregator = (v,w) => 1\r\n                weightAccessor = d=>1;\r\n                labelFormatter  = (d) => d.toFixed(4);\r\n                break;\r\n        }\r\n        var config = {\r\n            accessor: accessor, \r\n            scaler: scaler, \r\n            aggregator: aggregator,\r\n            weightAccessor: weightAccessor,\r\n            labelFormatter: labelFormatter,\r\n            name: name,\r\n        }\r\n        return config\r\n    }\r\n\r\n    static getGroupAccessor(key, date){\r\n        var config = CountyStats.getVarConfig(key, date);\r\n        var groupAccessor = function(d){\r\n            var vals = [];\r\n            var totalWeights = [];\r\n            for(var county of CountyStats.getGroupCounties(d)){\r\n                let newVal = config.accessor(county);\r\n                let weight = config.weightAccessor(county)\r\n                vals.push(newVal*weight);\r\n                totalWeights.push(weight)\r\n            }\r\n            return config.aggregator(vals,totalWeights)\r\n        }.bind(config)\r\n        return groupAccessor\r\n    }\r\n\r\n    static getSecondaryAccessor(key, startDate, endDate, perCapita = true){\r\n        //get an accessor to calculate the thing to plot on the CovidTimeLine chart\r\n        //for specifically time change data.  Currenlty just covid\r\n        var accessor;\r\n        switch(key){\r\n            case 'cases':\r\n            case 'deaths':\r\n                if(startDate == endDate){\r\n                    accessor = d => CountyStats.covidData(d, key, endDate)\r\n                } else{\r\n                    accessor = d => CountyStats.countyCovidChange(d, key, [startDate, endDate], perCapita)[0]\r\n                }\r\n                break;\r\n            case 'tweets':\r\n                accessor = CountyStats.getTweetCount\r\n                break\r\n            default:\r\n                accessor = d => CountyStats.covidData(d, key, endDate);\r\n        }\r\n        return accessor;\r\n    }\r\n    \r\n    static getCountyPopulation(data){\r\n        return parseInt(data.cvap)\r\n    }\r\n\r\n    static getCountyName(data){\r\n        return data.county_name;\r\n    }\r\n\r\n    static getGroupCounties(cgData){\r\n        return cgData.counties;\r\n    }\r\n\r\n    static getNetDemVotes(data){\r\n        var netClinton = parseFloat(data.net_dem_president_votes);\r\n        var netDemGov = parseFloat(data.net_dem_gov_votes);\r\n        var votes = 0;\r\n        if(!isNaN(netClinton)){\r\n            votes = netClinton;\r\n        }\r\n        else if(!isNaN(netDemGov)){\r\n            votes = netDemGov;\r\n        }\r\n        return votes\r\n    }\r\n\r\n    static getMedianIncome(d){\r\n        return parseInt(d.median_hh_inc)\r\n    }\r\n\r\n    static getLowEducationPct(d){\r\n        return parseInt(d.lesshs_pct)\r\n    }\r\n\r\n    static getURMPct(d){\r\n        return parseInt(d.urm_pct)\r\n    }\r\n\r\n    static getCountyGeoid(d){\r\n        return parseInt(d.GEOID)\r\n    }\r\n\r\n    static getUnemploymentPct(d){\r\n        return parseFloat(d.clf_unemploy_pct)\r\n    }\r\n\r\n    static getTweetCount(d){\r\n        return parseInt(d.tweet_users)\r\n    }\r\n\r\n    static getParentCountyGroup(d){\r\n        return parseInt(d.parent);\r\n    }\r\n\r\n    static getCountyGroup(d){\r\n        return parseInt(d.groupId);\r\n    }\r\n\r\n    static getCountyName(d){\r\n        return d.county_name;\r\n    }\r\n\r\n    static covidData(d, key, date){\r\n        let covid = d.covid[date]\r\n        return covid[key]\r\n    }\r\n\r\n\r\n    static groupCovidData(cgData, key, date){\r\n        var total = 0;\r\n        for(var countyPoint of cgData.counties){\r\n            total += CountyStats.covidData(countyPoint, key, date);\r\n        }\r\n        return total\r\n    }\r\n\r\n    static countyGroupPopulation(cgData){\r\n        var totalCVAP = 0;\r\n        for(var countyPoint of cgData.counties){\r\n            totalCVAP += CountyStats.getCountyPopulation(countyPoint);\r\n        }\r\n        return totalCVAP\r\n    }\r\n\r\n    \r\n\r\n    static countyGroupMedianIncome(cgData){\r\n        var income = cgData.counties.map(CountyStats.getMedianIncome)\r\n        return Utils.mean(income).toFixed(0)\r\n    }\r\n\r\n    static countyGroupTweetCount(cgData){\r\n        var tweets = cgData.counties.map(CountyStats.getTweetCount);\r\n        return Utils.sum(tweets)\r\n    }\r\n\r\n    static countyCovidChange(county, key, dates, perCapita = true){\r\n        //should give the change in covid rates between date in dates?\r\n        //takes a singe county item\r\n        //returns an array of dates.length - 1\r\n        var diffs = [];\r\n        let weight = (perCapita)? CountyStats.getCountyPopulation(county): 1;\r\n        var currVal = CountyStats.covidData(county, key, dates[0])/weight;\r\n        for(let date of dates.slice(1)){\r\n            let newVal = CountyStats.covidData(county, key, date)/weight;\r\n            let diff = newVal - currVal;\r\n            diffs.push(diff)\r\n            currVal = newVal;\r\n        }\r\n        return diffs\r\n    }\r\n\r\n    static groupNetDemVotes(cgData){\r\n        var netVotes = cgData.counties.map(CountyStats.getNetDemVotes)\r\n        return Utils.sum(netVotes)\r\n    }\r\n\r\n    static additionalToolTipVars = ['population','cases','deaths'];\r\n\r\n\r\n    static getSingleCountyToolTip(data, date, pVar, sVar, tVar){\r\n         var string = CountyStats.getCountyName(data) + ' county</br>';\r\n         let vars = [pVar, sVar, tVar];\r\n         for(let additionalVar of CountyStats.additionalToolTipVars.slice()){\r\n             if(vars.indexOf(additionalVar) === -1){\r\n                 vars.push(additionalVar)\r\n             }\r\n         }\r\n         for(let v of vars){\r\n             if(v !== 'none'){\r\n                try{\r\n                    let config = CountyStats.getVarConfig(v,date);\r\n                    let accessor = config.accessor;\r\n                    let value = accessor(data);\r\n                    string += config.name + ': ' + config.labelFormatter(value) + '</br>';\r\n                } catch{}\r\n             }\r\n        \r\n         }\r\n         return string\r\n    }\r\n\r\n    static getGroupToolTip(data, date, pVar, sVar, tVar){\r\n        var string = '';\r\n         let vars = [pVar, sVar, tVar];\r\n         for(let additionalVar of CountyStats.additionalToolTipVars.slice()){\r\n             if(vars.indexOf(additionalVar) === -1){\r\n                 vars.push(additionalVar)\r\n             }\r\n         }\r\n         for(let v of vars){\r\n             if(v !== 'none'){ \r\n                try{\r\n                    let config = CountyStats.getVarConfig(v,date);\r\n                    let accessor = CountyStats.getGroupAccessor(v,date);\r\n                    let value = accessor(data);\r\n                    string += config.name + ': ' + config.labelFormatter(value) + '</br>';\r\n                } catch {}\r\n             }\r\n         }\r\n         return string\r\n    }\r\n\r\n    static activeGroups(data, active, inverse=false){\r\n        //data: default county data format\r\n        //active: list of groupIds that are currently selected.\r\n        //returns data with the active groups.  Reverse returns all non-active groups\r\n        var activeData;\r\n        if(!inverse){\r\n            activeData = data.slice().filter(d => active.indexOf(CountyStats.getCountyGroup(d)) > -1);\r\n        } else{\r\n            activeData = data.slice().filter(d => active.indexOf(CountyStats.getCountyGroup(d)) === -1);\r\n        }\r\n        return activeData;\r\n    }\r\n\r\n}\r\n","import * as d3 from 'd3';\r\nimport CountyStats from './CountyStats';\r\nimport Utils from './Utils';\r\nimport textures from 'textures';\r\nimport { quantile, qunatileRank } from 'simple-statistics';\r\n\r\nexport default class DualColorScale {\r\n\r\n    constructor(groupData, primaryVar, secondaryVar, tertiaryVar, date, scaleFunc = null){\r\n        if(groupData === undefined || Utils.emptyObject(groupData)){\r\n            this.active = false;\r\n        }\r\n\r\n        else{\r\n            this.active = true;\r\n            this.activePrimary = primaryVar !== 'none' & primaryVar !== undefined;\r\n            this.activeSecondary = secondaryVar !== 'none' & primaryVar !== undefined;\r\n            this.activeTertiary = tertiaryVar !== 'none' & tertiaryVar !== undefined;\r\n            this.stateId = primaryVar+secondaryVar+tertiaryVar+date;\r\n            this.primaryVar = primaryVar;\r\n            this.secondaryVar = secondaryVar;\r\n            this.tertiaryVar = tertiaryVar;\r\n            this.date = date;\r\n\r\n            this.primarySingleAccessor = CountyStats.getAccessor(primaryVar, date);\r\n            this.secondarySingleAccessor = CountyStats.getAccessor(secondaryVar, date);\r\n            this.tertiarySingleAccessor = CountyStats.getAccessor(tertiaryVar, date);\r\n\r\n            this.primaryGroupAccessor = CountyStats.getGroupAccessor(primaryVar, date);\r\n            this.secondaryGroupAccessor = CountyStats.getGroupAccessor(secondaryVar, date);\r\n            this.tertiaryGroupAccessor = CountyStats.getGroupAccessor(tertiaryVar, date);\r\n\r\n            this.scaleRanges = Utils.arrange(0, 1, 20);\r\n            this.colorRanges = Utils.arrange(.1,1,20)\r\n            this.primaryScale = this.getQuantileScale(groupData, this.primaryGroupAccessor);\r\n            this.secondaryScale = this.getQuantileScale(groupData,  this.secondaryGroupAccessor);\r\n            this.tertiaryScale = this.getQuantileScale(groupData, this.tertiaryGroupAccessor)\r\n            this.populationScale = this.getPowerScale(groupData, CountyStats.countyGroupPopulation);\r\n\r\n            //this  sets a few things to correct for what to do when we show voting data since htat should alwyas be red/blue\r\n            //there is probably a better way to do this?\r\n            if(primaryVar === 'voting'){\r\n                this.primaryInterpolator = d3.interpolateRdBu;\r\n                if(secondaryVar === 'voting'){\r\n                    this.secondaryInterpolator = d3.interpolateRdBu;\r\n                    this.glyphScale = d => 2*Math.abs(d-.5);\r\n                } else{\r\n                    this.secondaryInterpolator = this.makeInterpolator(40);\r\n                    this.glyphScale = d=>d;\r\n                }\r\n                if(tertiaryVar === 'voting'){\r\n                    this.tertiaryInterpolator = d3.interpolateRdBu;\r\n                    this.patternScale = d => 2*Math.abs(d-.5)**.5;\r\n                } else{\r\n                    this.tertiaryInterpolator = d3.interpolateGreys;\r\n                    this.patternScale = d => d;\r\n                }\r\n \r\n            } \r\n            else{\r\n                this.primaryInterpolator = this.makeInterpolator(40);\r\n\r\n                if(secondaryVar === 'voting'){\r\n                    this.secondaryInterpolator = d3.interpolateRdBu;\r\n                    this.glyphScale = d => 2*Math.abs(d-.5);\r\n                } else{\r\n                    this.secondaryInterpolator = d3.interpolatePurples;\r\n                    this.glyphScale = d=>d;\r\n                }\r\n                if(tertiaryVar === 'voting'){\r\n                    this.tertiaryInterpolator = d3.interpolateRdBu;\r\n                    this.primaryInterpolator = this.makeInterpolator(40);\r\n                    this.patternScale = d => 2*Math.abs(d-.5)**.5;\r\n                } else{\r\n                    this.tertiaryInterpolator = d3.interpolateGreys;\r\n                    this.patternScale = d => d;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    makeInterpolator(hue,hue2){\r\n        var interpolateHue;\r\n        if(hue2 === undefined){\r\n            interpolateHue = function(d){\r\n                let s = .1 + .9*d;\r\n                let l = .9 - .55*d;\r\n                return d3.hsl(hue, s,l).toString()\r\n            }.bind(hue)\r\n        } else{\r\n            interpolateHue = function(d){\r\n                let diff = 2*Math.abs(d - .5);\r\n                let s = .1 + .9*diff;\r\n                let l = .9 - .55*diff;\r\n                let h = (d >= .5)? hue: hue2;\r\n                return d3.hsl(h,s,l).toString()\r\n            }\r\n        }\r\n        return interpolateHue\r\n    }\r\n\r\n    getPowerScale(cgData, accessor, exponent=1){\r\n        //scale for primary color.  uses a continues scale\r\n        var transform = d => d**exponent;\r\n\r\n        let max = d3.max(cgData.map(accessor).map(transform));\r\n        var scale = d3.scaleLinear()\r\n            .domain([0, max])\r\n            .range([0,1]);\r\n        console.log('max', max, scale(max), scale(max/2))\r\n        var powerTransform = d=>scale(transform(d));\r\n        return powerTransform;\r\n    }\r\n\r\n    getQuantileScale(cgData, accessor, nQuantiles){\r\n        //will use a discrete scale\r\n        var values = cgData.map(accessor)\r\n        var scaleRanges = (nQuantiles !== undefined)? Utils.arrange(0,1, nQuantiles): this.scaleRanges;\r\n        var colorRanges = (nQuantiles !== undefined)? Utils.arrange(0,1, nQuantiles): this.colorRanges;\r\n        var quantiles = quantile(values.filter(d => d !== 0), scaleRanges);\r\n        //so I think this will give a qunatile transform?\r\n        var scale = d3.scaleLinear()\r\n            .domain(quantiles)\r\n            .range(colorRanges);\r\n\r\n        var quantileTransform = d => scale(d);\r\n        return scale\r\n    }\r\n\r\n    interpolateFill(pVal, sVal){\r\n        let pQuant = this.primaryScale(pVal);\r\n        return this.primaryInterpolator(pQuant)\r\n    }\r\n\r\n\r\n    getGroupColor(cgData){\r\n        if(!this.activePrimary || !this.active){\r\n            return '#FAEBD7'\r\n        } \r\n        var primaryVal = this.primaryGroupAccessor(cgData);\r\n        if(!this.activeSecondary){\r\n            return this.interpolateFill(primaryVal, 0.01)\r\n        }\r\n        var secondaryVal = this.secondaryGroupAccessor(cgData);\r\n        return this.interpolateFill(primaryVal, secondaryVal)\r\n    }\r\n\r\n    getCountyColor(data){\r\n        if(!this.activePrimary || !this.active){\r\n            return '#FFEBCD'\r\n        }\r\n        var primaryVal = this.primarySingleAccessor(data);\r\n        if(!this.activeSecondary){\r\n            return this.interpolateFill(primaryVal, 0.01)\r\n        }\r\n        var secondaryVal = this.secondarySingleAccessor(data);\r\n        return this.interpolateFill(primaryVal, secondaryVal)\r\n    }\r\n\r\n    getGroupTexture(cgData){\r\n        // var backgroundColor = this.getGroupColor(cgData);\r\n        var backgroundColor = this.getGroupColor(cgData)\r\n        var tVal = this.tertiaryGroupAccessor(cgData);\r\n        return this.toTexture(tVal, backgroundColor, 4)\r\n    }\r\n\r\n    getCountyTexture(cgData){\r\n        var backgroundColor = this.getCountyColor(cgData);\r\n        var tVal = this.tertiarySingleAccessor(cgData)\r\n        return this.toTexture(tVal, backgroundColor, 3)\r\n    }\r\n\r\n    toTexture(value, bColor, size = 3){\r\n        var val = this.tertiaryScale(value);\r\n        let tColor = this.tertiaryInterpolator(val);\r\n\r\n        var texture = textures\r\n            .lines()\r\n            .orientation('vertical')\r\n            .size(size)\r\n            .stroke(tColor)\r\n            .strokeWidth(this.patternScale(val))\r\n            .background(bColor);\r\n\r\n        return texture\r\n    }\r\n\r\n\r\n    getGlyphColor(d){\r\n        if(!this.activeSecondary || !this.active){\r\n            return '';\r\n        }\r\n        var sVal = this.secondarySingleAccessor(d);\r\n        sVal = this.secondaryScale(sVal)\r\n        return this.secondaryInterpolator(sVal)\r\n    }\r\n\r\n    getGlyphRadius(d){\r\n        if(!this.activeSecondary || !this.active){\r\n            return 0\r\n        }\r\n        var value = this.secondarySingleAccessor(d);\r\n        if(value === 0){\r\n            return 0\r\n        } else{\r\n            value = this.secondaryScale(value);\r\n            value = this.glyphScale(value); //basically if we doing voting data it makes it centered on .5\r\n        }\r\n        var pop = CountyStats.getCountyPopulation(d);\r\n        pop = this.populationScale(pop)\r\n        return this.scaleRadius(value,pop)\r\n    }\r\n\r\n    scaleRadius(valueQuant, populationQuant){\r\n        return 7*((populationQuant*valueQuant)**.5) + 1\r\n    }\r\n\r\n    drawGlyph(node){\r\n        // console.log('drawGlyph', node);\r\n    }\r\n}","import React from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport '../App.css';\r\n// import ColorMap from '../modules/ColorMap.js';\r\nimport DualColorScale from '../modules/DualColorScale.js';\r\nimport Utils from '../modules/Utils.js';\r\nimport CountyStats from '../modules/CountyStats';\r\nimport textures from 'textures';\r\nimport * as constants from '../modules/Constants.js';\r\n// import { interpolate, keys } from \"d3\";\r\n\r\nexport default class Map extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            zoomedToId: null,\r\n            currentTransform: '',\r\n            activeCountyGroups: [],\r\n        }\r\n        // this.colorMap = new ColorMap();\r\n        this.dataAccessor = (d=>d);\r\n        this.colorProps = {};\r\n        this.bordersDrawn = false;\r\n        this.glyphsDrawn = false;\r\n    }\r\n\r\n    static defaultProps = {\r\n        spikeWidth: 6,\r\n        backgroundColor: 'white',\r\n        spikeStrokeWidth: 1,\r\n        strokeColor: 'black',\r\n        aggregateCountys: false,\r\n        glyphsActive: true,\r\n        maxSpikeHeight: 30,\r\n        spikeHeightScaleExp: 2 //currently does a quantile transform and then applies a power tranform with this exp within it\r\n    }\r\n\r\n    zoomed(){\r\n        var transform = d3.event.transform;\r\n        this.setState({currentTransform: transform});\r\n    }\r\n\r\n    create(node){\r\n        d3.select(node).selectAll('svg').remove();\r\n        this.height = node.clientHeight;\r\n        this.width = node.clientWidth;\r\n        this.svg = d3.select(node).append('svg')\r\n            .attr('class','map-svg zoomable')\r\n            .attr('width', this.width)\r\n            .attr('height', this.height)\r\n            .style('background-color', this.props.backgroundColor)\r\n            .on('contextmenu',this.handleRightClick.bind(this));\r\n\r\n        this.scale = Math.min(this.width*1.35, this.height*3);\r\n\r\n        this.g = this.svg.append('g').attr('class','map');\r\n\r\n        this.zoom = d3.zoom().on('zoom',this.zoomed.bind(this));\r\n\r\n        this.svg.call(this.zoom);\r\n\r\n        this.projection = d3.geoAlbersUsa()\r\n            .translate([node.clientWidth/2, node.clientHeight/2])\r\n            .scale(this.scale);\r\n\r\n        this.path = d3.geoPath()\r\n            .projection(this.projection);\r\n\r\n        Utils.wrapError(this.drawBorders.bind(this), 'error in Map.drawBorders');\r\n        Utils.wrapError(this.colorBoundaries.bind(this), 'error in Map.colorBoundaries');\r\n        Utils.wrapError(this.drawGlyphs.bind(this), 'error in Map.drawSpikes');\r\n    }\r\n\r\n    destroy(){\r\n        d3.selectAll('.map-svg').remove();\r\n    }\r\n\r\n    drawBorders(){\r\n        this.g.selectAll('path').filter('.county').remove();\r\n        if(Utils.emptyObject(this.props.data)){ return }\r\n        if(this.props.aggregateCountys){\r\n            this.drawCountyGroupBorders();\r\n        } else{\r\n            this.drawSingleCountys();\r\n        }\r\n    }\r\n\r\n    drawCountyGroupBorders(){\r\n        this.bordersDrawn = false;\r\n        \r\n        var borders = this.g.selectAll('path').filter('.county')\r\n            .data(this.props.data)\r\n            .enter().append('path')\r\n            .attr('class', 'county')\r\n            .attr('id', (d,i)=>{return 'countyGroup'+CountyStats.getCountyGroup(d)})\r\n            .attr('d', d=> this.path(d.features));\r\n        borders.exit().remove()\r\n\r\n        this.bordersDrawn = true;\r\n    }\r\n\r\n    drawSingleCountys(){\r\n        this.bordersDrawn = false;\r\n\r\n        for(var countyData of this.props.data){\r\n            var parentId = CountyStats.getCountyGroup(countyData)\r\n            let currCountys = this.g.selectAll('path')\r\n                .filter('.county')\r\n                .filter(\"[parentId='\" + parentId + \"']\");\r\n            currCountys.data(countyData.counties).enter()\r\n                .append('path')\r\n                .attr('class', 'county')\r\n                .attr('parentId', parentId)\r\n                .attr('id', (d,i) =>'singleCounty' + CountyStats.getCountyGeoid(d))\r\n                .attr('d', d => this.path(d.features));\r\n            currCountys.exit().remove();\r\n        }\r\n        this.bordersDrawn = true;\r\n    }\r\n\r\n    colorBoundaries(){\r\n        if(Utils.emptyObject(this.props.data)){ return }\r\n        \r\n        this.colorScale = this.props.colorScale;\r\n\r\n        var getColor = this.colorScale.getCountyColor.bind(this.colorScale);;\r\n        var onClick = this.handleSingleCountyClick.bind(this);\r\n        var onMouseOver = (d,i) => this.handleSingleCountyMouseOver(d,i);\r\n        var onMouseOut = (d,i) => this.handleSingleCountyMouseOut(d,i);\r\n        var getGroupId = d => CountyStats.getParentCountyGroup(d);\r\n        var activeStrokeWidth = 1;\r\n\r\n        if(this.props.aggregateCountys){\r\n            getColor = this.colorScale.getGroupColor.bind(this.colorScale);\r\n            getGroupId = CountyStats.getCountyGroup;\r\n            // getClass = d => 'countyGroup';\r\n            onClick = this.handleCountyGroupClick.bind(this);\r\n            onMouseOver = (d,i)=> this.handleGroupMouseOver(d,i);\r\n            onMouseOut = (d,i) => this.handleGroupMouseOut(d,i);\r\n            activeStrokeWidth = 1.5;\r\n        }\r\n\r\n        var getStroke = function(d){\r\n            let groupId = getGroupId(d);\r\n            let isActive = this.props.activeCountyGroups.indexOf(groupId) !== -1;\r\n            return (isActive)? activeStrokeWidth: 0;\r\n        }.bind(this)\r\n\r\n        var counties = this.g.selectAll('path').filter('.county');\r\n        var patterns = [];\r\n        if(this.props.tertiaryVar !== 'none'){\r\n            var getTexture = (this.props.aggregateCountys)? this.colorScale.getGroupTexture.bind(this.colorScale): this.colorScale.getCountyTexture.bind(this.colorScale);\r\n            counties.data().forEach(d =>{\r\n                var t = getTexture(d);\r\n                patterns.push(t)\r\n            });\r\n            getColor = function(d,i){\r\n                var t = patterns[i];\r\n                this.svg.call(t)\r\n                return t.url();\r\n            }.bind(this)\r\n        }\r\n        \r\n        counties.attr('stroke', this.props.strokeColor)\r\n            .attr('fill', getColor)\r\n            .attr('stroke-width', getStroke)\r\n            .on('mouseover', onMouseOver.bind(this))\r\n            .on('mouseout', onMouseOut.bind(this))\r\n            .on('click', onClick.bind(this));\r\n\r\n        counties.exit().remove();\r\n    }\r\n\r\n    drawGlyphs(){\r\n        if(Utils.emptyObject(this.props.data) || !this.props.glyphsActive){ return }\r\n        this.g.selectAll('.glyph').remove()\r\n        if(this.props.secondaryVar === 'none'){return}\r\n        console.log('drawGlyphs');\r\n\r\n        var getCentroid = function(d){\r\n            var centroid = this.projection(d3.geoCentroid(d.features));\r\n            return centroid\r\n        }.bind(this)\r\n\r\n        var getGlyphColor = this.props.colorScale.getGlyphColor.bind(this.colorScale);\r\n        var getGlyphRadius = this.props.colorScale.getGlyphRadius.bind(this.colorScale);\r\n\r\n\r\n        for(var countyData of this.props.data){\r\n            var parentId = CountyStats.getCountyGroup(countyData)\r\n            let currCountys = this.g.selectAll('.glyph')\r\n                .filter(\"[parentId='\" + parentId + \"']\")\r\n                .data(countyData.counties)\r\n                .enter()\r\n                .append('circle')\r\n                .attr('class', 'glyph')\r\n                .attr('id', d=> 'glyph'+CountyStats.getCountyGeoid(d))\r\n                .attr('parentId', parentId)\r\n                .attr('cx', d => getCentroid(d)[0])\r\n                .attr('cy', d => getCentroid(d)[1])\r\n                .attr('r', getGlyphRadius)\r\n                .attr('stroke-width', .5)\r\n                .attr('stroke','black')\r\n                .attr('fill', getGlyphColor)\r\n                .on('click', this.handleGlyphClick.bind(this))\r\n                .on('mouseover',(d,i) => this.handleGlyphMouseOver(d,i))\r\n                .on('mouseout', (d,i) => this.handleGlyphMouseOut(d,i))\r\n                .raise()\r\n\r\n            // currCountys.nodes().forEach(node =>{\r\n            //     this.colorScale.drawGlyph(node)\r\n            // }, this)\r\n            currCountys.exit().remove();\r\n        }\r\n        this.glyphsDrawn = true;\r\n    }\r\n\r\n    handleGlyphClick(d){\r\n        var countyGroup = CountyStats.getParentCountyGroup(d);\r\n        this.props.toggleActiveCountyGroups(countyGroup)\r\n    }\r\n\r\n    singleTTip(d){\r\n        return CountyStats.getSingleCountyToolTip(\r\n            d, \r\n            this.props.mapDate, \r\n            this.props.mapVar, \r\n            this.props.secondaryVar, \r\n            this.props.tertiaryVar\r\n        )\r\n    }\r\n\r\n    groupTTip(d){\r\n        return CountyStats.getGroupToolTip(\r\n            d, \r\n            this.props.mapDate, \r\n            this.props.mapVar, \r\n            this.props.secondaryVar, \r\n            this.props.tertiaryVar\r\n        )\r\n    }\r\n\r\n    handleGlyphMouseOver(d,i){\r\n        var target = this.g.select('#glyph'+CountyStats.getCountyGeoid(d));\r\n        var currRadius = target.node().getAttribute('r')\r\n        target.style('r', currRadius*3)\r\n            .style('stroke','red')\r\n            .style('z-index', 100);\r\n        try{\r\n            var bbox = target.node().getBoundingClientRect();\r\n            console.log('gmouseover', bbox);\r\n            var svgRect = d3.select('.map-svg').node().getBoundingClientRect();\r\n            var ttip = d3.select('#mapToolTip');\r\n            console.log('gm',ttip,svgRect)\r\n            ttip.style('left', bbox.right - svgRect.left + bbox.width/4 + 'px')\r\n                .style('top', bbox.top  - svgRect.top + bbox.height/2 + 'px')\r\n                .style('visibility','visible')\r\n                .html(this.singleTTip(d));\r\n        } \r\n        catch {console.log('error on single mouseover')}\r\n    }\r\n\r\n    handleGlyphMouseOut(d,i){\r\n        var target = this.g.select('#glyph'+CountyStats.getCountyGeoid(d));\r\n        target.style('r', '')\r\n            .style('stroke', '');\r\n        var ttip = d3.select('#mapToolTip');\r\n        ttip.style('visibility', 'hidden');\r\n    }\r\n    handleRightClick(event){\r\n        d3.event.preventDefault()\r\n        if(this.bordersDrawn){\r\n            let emptyTransform = '';\r\n            this.setState({currentTransform: emptyTransform})\r\n        }\r\n    }\r\n\r\n    handleGroupMouseOver(d,i){\r\n        var target = this.g.select('#countyGroup'+CountyStats.getCountyGroup(d));\r\n        target.style('stroke-width', 7)\r\n            .style('stroke', 'red')\r\n            .style('z-index', 100);\r\n        try{\r\n            var bbox = target.node().getBoundingClientRect();\r\n            var svgRect = d3.select('.map-svg').node().getBoundingClientRect();\r\n            var ttip = d3.select('#mapToolTip');\r\n            ttip.style('left', bbox.right - svgRect.left + bbox.width/4 + 'px')\r\n                .style('top', bbox.top  - svgRect.top + bbox.height/2 + 'px')\r\n                .style('visibility','visible')\r\n                .html(this.groupTTip(d));\r\n        } \r\n        catch {console.log('error on mouseover')}\r\n    }\r\n\r\n    handleSingleCountyMouseOver(d,i){\r\n        var target = this.g.select('#singleCounty'+CountyStats.getCountyGeoid(d));\r\n        target.style('stroke-width',5)\r\n            .style('stroke','red')\r\n            .style('z-index', 100)\r\n        try{\r\n            var bbox = target.node().getBoundingClientRect();\r\n            var svgRect = d3.select('.map-svg').node().getBoundingClientRect();\r\n            var ttip = d3.select('#mapToolTip');\r\n            ttip.style('left', bbox.right - svgRect.left + bbox.width/4 + 'px')\r\n                .style('top', bbox.top  - svgRect.top + bbox.height/2 + 'px')\r\n                .style('visibility','visible')\r\n                .html(this.singleTTip(d));\r\n        } \r\n        catch {console.log('error on single mouseover')}\r\n    }   \r\n\r\n    handleGroupMouseOut(d,i){\r\n        var target = this.g.select('#countyGroup'+CountyStats.getCountyGroup(d));\r\n        target.style('stroke-width', '')\r\n            .style('stroke', '');\r\n        var ttip = d3.select('#mapToolTip');\r\n        ttip.style('visibility', 'hidden');\r\n    }\r\n\r\n    handleSingleCountyMouseOut(d,i){\r\n        var geoid = CountyStats.getCountyGeoid(d)\r\n        try{\r\n            var target = this.g.select('#singleCounty'+geoid);\r\n            target.style('stroke-width','')\r\n                .style('stroke','')\r\n                .style('z-index', '');\r\n        } catch {\r\n            d3.selectAll('.map-svg').select('#singleCounty'+geoid)\r\n                .style('stroke-width','')\r\n                .style('stroke','')\r\n                .style('z-index', '');\r\n        }\r\n\r\n        var ttip = d3.select('#mapToolTip');\r\n        ttip.style('visibility', 'hidden')\r\n    }\r\n\r\n    handleCountyGroupClick(event){\r\n        var countyGroup = CountyStats.getCountyGroup(event);\r\n        this.props.toggleActiveCountyGroups(countyGroup)\r\n    }\r\n\r\n    handleSingleCountyClick(event){\r\n        var countyGroup = CountyStats.getParentCountyGroup(event);\r\n        this.props.toggleActiveCountyGroups(countyGroup)\r\n    }\r\n\r\n    componentDidMount(){\r\n        //I coppied code and this gives the root element and I don't know why\r\n        this.create(this._rootNode,);\r\n        //first draw\r\n    }\r\n\r\n    shouldDrawBorders(prevProps){\r\n        if(this.props.data === undefined){\r\n            return false\r\n        }\r\n        else if(!this.bordersDrawn & this.props.data.length > 0){\r\n            return true\r\n        } else if(this.props.aggregateCountys !== prevProps.aggregateCountys){\r\n            return true\r\n        }\r\n        else{\r\n            return (prevProps.data.length !== this.props.data.length)\r\n        }\r\n    }\r\n\r\n    shouldDrawGlyphs(prevProps){\r\n        if(this.props.data === undefined || Utils.emptyObject(this.props.data)){\r\n            return false\r\n        } else if(Utils.emptyObject(prevProps.data) || this.props.data.length !== prevProps.data.length){\r\n            return true\r\n        }\r\n        else if(this.props.mapDate !== prevProps.mapDate || this.props.secondaryVar !== prevProps.secondaryVar){\r\n            return true\r\n        } \r\n        if(!this.glyphsDrawn){\r\n            return true\r\n        }\r\n        return (prevProps.data.length !== this.props.data.length)\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        //update map\r\n        //I'm assuming we only need to redraw borders when they change and the dataset size changes?\r\n        console.log('map Update', this.props, prevProps)\r\n        if(this.props.data !== undefined){\r\n            if(this.shouldDrawBorders(prevProps)){\r\n                Utils.wrapError(this.drawBorders.bind(this), 'error in Map.drawBorders');\r\n            }\r\n            Utils.wrapError(this.colorBoundaries.bind(this), 'error in Map.colorBoundaries');\r\n            if(this.shouldDrawGlyphs(prevProps)){\r\n                Utils.wrapError(this.drawGlyphs.bind(this), 'error in Map.drawGlyphs')\r\n            }\r\n            this.g.attr('transform', this.state.currentTransform)\r\n            this.g.selectAll('.glyph').raise()\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        //destroy stuff\r\n        this.destroy();\r\n    }\r\n\r\n    _setRef(componentNode){\r\n        this._rootNode = componentNode;\r\n    }\r\n\r\n    render(){\r\n        return <div className='map-container' ref={this._setRef.bind(this)}>\r\n            <div \r\n                id={'mapToolTip'}\r\n                className={'toolTip'} \r\n            >\r\n                Test\r\n            </div>\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport Utils from '../modules/Utils';\r\nimport * as constants from '../modules/Constants';\r\nimport CountyStats from '../modules/CountyStats';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport '../App.css'\r\n\r\nexport default class ColorLegend extends React.Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          primaryTitle: 'none',\r\n          secondaryTitle: 'none',\r\n          tertiaryTitle: 'none',\r\n    }\r\n    }\r\n\r\n    static defaultProps ={\r\n        xMargin: 5,\r\n        yMargin: 10,\r\n        legendMargin: 15,\r\n        nQuantiles: 5,\r\n        barSpacing: .2,\r\n        textWidth: 70,\r\n        legendTitleSpace: 22,\r\n        maxBarHeight: 30,\r\n        maxBarWidth: 40\r\n    }\r\n\r\n    componentDidMount(){\r\n        var node = this.refs.rootNode;\r\n        this.height = node.clientHeight;\r\n        this.width = node.clientWidth;\r\n\r\n        this.primarySvg = d3.select(this.refs.primaryLegend)\r\n            .append('svg')\r\n            .attr('width', this.width)\r\n            .attr('height', this.refs.primaryLegend.clientHeight -this.props.legendTitleSpace)\r\n            // .attr('height',this.height/3);\r\n\r\n        this.secondarySvg = d3.select(this.refs.secondaryLegend)\r\n            .append('svg')\r\n            .attr('width', this.width)\r\n            .attr('height', this.refs.secondaryLegend.clientHeight -this.props.legendTitleSpace)\r\n            // .attr('height',this.height/3);\r\n\r\n        this.tertiarySvg = d3.select(this.refs.tertiaryLegend)\r\n            .append('svg')\r\n            .attr('width', this.width)\r\n            .attr('height', this.refs.tertiaryLegend.clientHeight -this.props.legendTitleSpace)\r\n            // .attr('height',this.height/3);\r\n\r\n        this.draw();\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n\r\n        //make sure we have data\r\n        if(Utils.emptyObject(this.props.data) || !this.props.colorScale.active){\r\n            return\r\n        }\r\n\r\n        let newScale = this.props.colorScale;\r\n        let oldScale = prevProps.colorScale;\r\n        //check that the color scale actually changes\r\n        let varsInLegend = ['primaryVar', 'secondaryVar', 'tertiaryVar'];\r\n        let flag = newScale.stateId !== oldScale.stateId;\r\n\r\n        if(flag){ \r\n            this.draw() \r\n        }\r\n    }\r\n\r\n    draw(){\r\n\r\n        if(!this.props.colorScale.active){\r\n            return\r\n        }\r\n\r\n        var cs = this.props.colorScale;\r\n\r\n        var cleanSvg = d => {\r\n            d.selectAll('rect').remove();\r\n            d.selectAll('text').remove();\r\n            d.selectAll('circle').remove()\r\n        }\r\n\r\n        if(cs.activePrimary){\r\n            this.drawPrimaryLegend(cs);\r\n        } else{\r\n            cleanSvg(this.primarySvg);\r\n        }\r\n        \r\n        if(cs.activeSecondary){\r\n            this.drawSecondaryLegend(cs);\r\n        } else{\r\n            cleanSvg(this.secondarySvg);\r\n        }\r\n\r\n        if(cs.activeTertiary){\r\n            this.drawTertiaryLegend(cs);\r\n        } else{\r\n            cleanSvg(this.tertiarySvg);\r\n        }\r\n\r\n        var toTitle = d=>{\r\n            if(d === 'none'){\r\n                return ''\r\n            }\r\n            return Utils.unCamelCase(d)\r\n        }\r\n\r\n        this.setState({\r\n            primaryTitle: toTitle(cs.primaryVar),\r\n            secondaryTitle: toTitle(cs.secondaryVar),\r\n            tertiaryTitle: toTitle(cs.tertiaryVar),\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    drawPrimaryLegend(cs){\r\n        var node = this.refs.primaryLegend;\r\n        var height = node.clientHeight;\r\n        var svg = this.primarySvg;\r\n\r\n        let pStartY = 0;\r\n        let pStopY = height;\r\n        this.getLegend(svg, cs.primaryScale, cs.primaryVar, cs.interpolateFill.bind(cs), pStartY, pStopY, 'primary')\r\n    }\r\n\r\n    drawSecondaryLegend(cs){\r\n        var node = this.refs.secondaryLegend;\r\n        var height = node.clientHeight;\r\n        var svg = this.secondarySvg;\r\n\r\n        var ticks = this.reduceTicks(cs.secondaryScale.domain());\r\n        var startY = 0;\r\n        var stopY = height;\r\n        var {barHeight, barWidth, yScale} = this.calcDims(ticks, startY, stopY);\r\n        var radius = Math.min(barHeight, barWidth)/2;\r\n        let getFill = d => cs.secondaryInterpolator(cs.secondaryScale(d))\r\n\r\n        svg.selectAll('.legendGlyph').remove();\r\n\r\n        let cx = (this.props.xMargin/2) + radius;\r\n        let getY = d => (yScale(d) + radius)\r\n        var legendGlyphs = svg.selectAll('circle')\r\n            .filter('.legendGlyph')\r\n            .data(ticks).enter()\r\n            .append('circle').attr('class','legendGlyph')\r\n            .attr('cx', cx)\r\n            .attr('cy', getY)\r\n            .attr('r', radius)\r\n            .attr('fill',getFill.bind(cs))\r\n            .attr('stroke','black')\r\n            .attr('stroke-width',1);\r\n\r\n        legendGlyphs.exit().remove();\r\n\r\n        var formatter = CountyStats.getVarConfig(cs.secondaryVar).labelFormatter;\r\n        svg.selectAll('.glyphLegendText').remove();\r\n        var legendText = svg.selectAll('text')\r\n            .filter('.glyphLegendText')\r\n            .data(ticks).enter()\r\n            .append('text').attr('class','glyphLegendText')\r\n            .attr('x', cx + radius+5)\r\n            .attr('y', d=> getY(d) + radius/3)\r\n            .text(d=>formatter(d));\r\n        legendText.exit().remove();\r\n    }\r\n\r\n    drawTertiaryLegend(cs){\r\n        var node = this.refs.tertiaryLegend;\r\n        var height = node.clientHeight;\r\n        var svg = this.tertiarySvg;\r\n\r\n        let tStartY = 0;\r\n        let tStopY = height;\r\n        let pTicks = cs.primaryScale.domain();\r\n        var patternBackground = cs.interpolateFill(pTicks[pTicks.length - 1]);\r\n        let tTicks = this.reduceTicks(cs.tertiaryScale.domain());\r\n        let patterns = [];\r\n        for(var tTick of tTicks){\r\n            let p = cs.toTexture(tTick, patternBackground);\r\n            console.log(patternBackground, p.url())\r\n            svg.call(p);\r\n            patterns.push(p.url());\r\n        }\r\n        let getTFill = (d,i) => patterns[i];\r\n        this.getLegend(svg, cs.tertiaryScale, cs.tertiaryVar, getTFill, tStartY, tStopY, 'tertiaryLegend')\r\n    }\r\n\r\n    reduceTicks(ticks){\r\n        let nTickSteps = parseInt(ticks.length/(this.props.nQuantiles-1));\r\n        if(nTickSteps > 1){\r\n            var newTicks = [];\r\n            ticks.forEach((d,i) => {\r\n                if(i%nTickSteps == 0){\r\n                    newTicks.push(d)\r\n                }\r\n            })\r\n        }\r\n        return newTicks\r\n    }\r\n\r\n\r\n    calcDims(ticks, startY, stopY){\r\n        var containerHeight = stopY - startY;\r\n        var barHeight = containerHeight/(ticks.length + 1) - this.props.barSpacing;\r\n        var barWidth = (this.width - this.props.xMargin) - this.props.textWidth;\r\n\r\n        barHeight = Math.min(barHeight, this.props.maxBarHeight);\r\n        barWidth = Math.min(barWidth, this.props.maxBarWidth);\r\n\r\n        const height = (barHeight + this.props.barSpacing)*(ticks.length+1);\r\n        var heights = Utils.arrange(startY,  stopY - barHeight, ticks.length);\r\n\r\n        var yScale = d3.scaleLinear()\r\n            .domain(ticks)\r\n            .range(heights.reverse());\r\n\r\n        return {barHeight: barHeight, barWidth: barWidth, yScale: yScale}\r\n    }\r\n\r\n    getLegend(svg, scale, varType, getFill, startY, stopY, className){\r\n        var ticks = this.reduceTicks(scale.domain());\r\n\r\n        var {barHeight, barWidth, yScale} = this.calcDims(ticks, startY, stopY);\r\n\r\n        svg.selectAll('rect').filter('.'+className+'Rect').remove();\r\n    \r\n        var legendRects = svg.selectAll('rect')\r\n            .filter('.'+className+'Rect')\r\n            .data(ticks).enter()\r\n            .append('rect').attr('class',className+'Rect')\r\n            .attr('x', this.props.xMargin/2)\r\n            .attr('y', d => yScale(d))\r\n            .attr('width', barWidth)\r\n            .attr('height', barHeight)\r\n            .attr('fill', getFill);\r\n\r\n        legendRects.exit().remove();\r\n\r\n        svg.selectAll('text').filter('.' + className +'Text').remove();\r\n        var legendFormatter = CountyStats.getVarConfig(varType).labelFormatter;\r\n        var legendText = svg.selectAll('text')\r\n            .filter('.' + className +'Text')\r\n            .data(ticks).enter()\r\n            .append('text').attr('class',className +'Text')\r\n            .attr('x', this.props.xMargin/2 + barWidth*1.02)\r\n            .attr('y', d => yScale(d) + barHeight/2 + this.props.yMargin/2)\r\n            .text( d => legendFormatter(d));\r\n\r\n        legendText.exit().remove();\r\n    }\r\n\r\n    render(){\r\n        // return <div className='colorLegend' ref='rootNode'/>\r\n        return (\r\n            <Grid container className={'flex-center'} ref='rootNode'> \r\n                <Grid item mt={1} xs={12}>\r\n                    <h6 className={'flex-auto'}>{this.state.primaryTitle}</h6>\r\n                    <div ref='primaryLegend'></div>\r\n                </Grid>\r\n                <Grid item  mt={10} xs={12}>\r\n                    <h6 className={'flex-auto'}>{this.state.secondaryTitle}</h6>\r\n                    <div ref='secondaryLegend'></div>\r\n                </Grid>\r\n                <Grid item mt={10} xs={12}>\r\n                    <h6 className={'flex-auto'}>{this.state.tertiaryTitle}</h6>\r\n                    <div ref='tertiaryLegend'></div>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport Map from './Map';\r\nimport './Map.css';\r\nimport ColorLegend from './ColorLegend';\r\nimport '../App.css'\r\nimport Utils from '../modules/Utils.js';\r\nimport DualColorScale from '../modules/DualColorScale.js';\r\nimport Grid from '@material-ui/core/Grid';\r\n// import CountyStats from '../modules/CountyStats';\r\n// import * as constants from '../modules/Constants.js';\r\n\r\nexport default class MapContainer extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        spikeColors: MapContainer.defaultSpikeConfig,\r\n      };\r\n    }\r\n\r\n    static defaultSpikeConfig = {\r\n        fill: 'yellow',\r\n        stroke:'black',\r\n        fillOpacity: .90,\r\n        strokeOpacity: 1\r\n    }\r\n\r\n    render() {\r\n        var colorScale = new DualColorScale(this.props.data, this.props.mapVar, this.props.secondaryVar, this.props.tertiaryVar, this.props.mapDate);\r\n\r\n        return (\r\n            <div className='mapContainer'>\r\n                <Grid container  direction='row' className={'flex-center'}>\r\n                    <Grid item className={'flex-center'} xs={10}>\r\n                        <h2 className='flex-center'>{Utils.unCamelCase(this.props.mapVar)}</h2>\r\n                        <div className='mapContainer flex-center'>\r\n                        <Map data={this.props.data} \r\n                            mapDate = {this.props.mapDate} \r\n                            mapVar = {this.props.mapVar}\r\n                            secondaryVar={this.props.secondaryVar}\r\n                            tertiaryVar={this.props.tertiaryVar}\r\n                            colorScale={colorScale} \r\n                            activeCountyGroups={this.props.activeCountyGroups}\r\n                            toggleActiveCountyGroups={this.props.toggleActiveCountyGroups}\r\n                            toggleLoading={this.props.toggleLoading}\r\n                            dataService={this.props.dataService}\r\n                            aggregateCountys={this.props.aggregateCountys}\r\n                            spikeColors={this.state.spikeColors}\r\n                        />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item className={'flex-left'} xs={2}>\r\n                        <ColorLegend\r\n                            className={'flex-left'}\r\n                            colorScale={colorScale}\r\n                            data={this.props.data}\r\n                            mapDate={this.props.mapDate}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n          )\r\n    }\r\n\r\n\r\n\r\n  }\r\n","import * as constants from './Constants';\r\nimport CountyStats from './CountyStats';\r\n// import Utils from './Utils.js';\r\n//code is modified to use as a demo so it doesn't require an actual backend that deals with updated data \r\nexport default class DataService {\r\n\r\n    constructor(args){\r\n        // this.axios = require('axios');\r\n        // this.api = this.axios.create({\r\n        //     baseURL: constants.API_URL,\r\n        // })\r\n        this.cache = {maxCovid: {}};\r\n        this.preloadCache()\r\n    }\r\n\r\n    test(testData){\r\n        return true;  \r\n    }\r\n\r\n    async getAvailableDates(useCache){\r\n        if(!useCache || this.cache['availableDates'] === undefined){\r\n            var availableDates = [\"3/1/20\",\"3/11/20\",\"3/21/20\",\"3/31/20\",\"4/10/20\",\"4/20/20\",\"4/30/20\",\"5/10/20\",\"5/20/20\",\"5/30/20\",\"6/19/20\",\"6/29/20\",\"6/9/20\",\"7/19/20\",\"7/9/20\"];\r\n            availableDates.sort((a,b) => Date.parse(a) - Date.parse(b));\r\n            this.cache.availableDates = availableDates;\r\n            // console.log('dates', this.cache.availableDates)\r\n            return this.cache.availableDates\r\n        } else{\r\n            return this.cache.availableDates\r\n        }\r\n        \r\n    }\r\n\r\n    async getMapData(useCache){\r\n        if(!useCache || this.cache['mapData'] === undefined){\r\n            var mapData = await fetch('county_groups.json');\r\n            this.cache.mapData = await mapData.json();\r\n            console.log(this.cache.mapData);\r\n            return this.cache.mapData\r\n        } else{\r\n            return this.cache.mapData\r\n        }\r\n    }\r\n\r\n    async preloadCache(){\r\n        this.getMapData(false).then(res => {\r\n            this.getAvailableDates(false);\r\n        });\r\n    }\r\n\r\n    maxGroupCovid(groupData, key, useCache = true){\r\n        if(this.cache.availableDates === undefined){\r\n            return 0\r\n        }\r\n        if(this.cache.maxCovid[key] === undefined || !useCache){\r\n            var covidPerCapita = function(d,key,date){\r\n                let covid = CountyStats.groupCovidData(d,key,date);\r\n                return covid/CountyStats.countyGroupPopulation(d)\r\n            }\r\n            let dates = this.cache.availableDates;\r\n            var maxVal = 0;\r\n            for(const date of dates){\r\n                let covidValues = groupData.map(d=>covidPerCapita(d,key,date));\r\n                for(var value of covidValues){\r\n                    maxVal = (value > maxVal)? value: maxVal;\r\n                }\r\n            }\r\n            this.cache.maxCovid[key] = maxVal\r\n        } \r\n        console.log('max', this.cache.maxCovid[key])\r\n        return this.cache.maxCovid[key]\r\n    }\r\n\r\n}","import React from 'react';\r\nimport Utils from '../modules/Utils';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Select from '@material-ui/core/Select';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport \"../App.css\";\r\n\r\nimport * as constants from '../modules/Constants';\r\nimport { FormHelperText } from '@material-ui/core';\r\n// import { Slider } from '@material-ui/core';\r\n\r\nexport default class ControlPanel extends React.Component {\r\n    //Componenet used to control parts of the interface\r\n    constructor(props){\r\n        super(props);\r\n        this.here = 0;\r\n        //this is where I check to see if the selected mapvar is valid I guess\r\n    }\r\n\r\n    render() {\r\n\r\n        //changes variable used to pick the color of the map\r\n        //format with Utils.unCamelCase e.g. casesPerCapita => Cases Per Capita\r\n        const mapVarDropDown = Utils.validMapVars().map(val => \r\n            <MenuItem key={val} value={val} disabled={Boolean(this.props.disabled || val == this.props.mapVar)}>{Utils.unCamelCase(val)}</MenuItem>\r\n        )\r\n\r\n        const secondaryVarDropDown = Utils.validMapVars().map(val => \r\n            <MenuItem key={val} value={val} disabled={Boolean(this.props.disabled || val === this.props.secondaryVar)}>{Utils.unCamelCase(val)}</MenuItem>\r\n        )\r\n\r\n        const tertiaryVarDropDown = Utils.validMapVars().map(val => \r\n            <MenuItem key={val} value={val} disabled={Boolean(this.props.disabled || val === this.props.tertiaryVar)}>{Utils.unCamelCase(val)}</MenuItem>\r\n        )\r\n\r\n        const aggregateDropDown = constants.AGGREGATION_LEVELS.slice().map( val =>\r\n            <MenuItem key={val} value={val} disabled={this.props.disabled}>{Utils.unCamelCase(val)}</MenuItem>\r\n        )\r\n\r\n        return (\r\n            <div className='controlPanel'>\r\n                <AppBar color='default'>\r\n                <Grid container spacing={1} justify='space-around' direction='row' align-items='flex-end'>\r\n                    <Grid item>\r\n                        <FormControl>\r\n                            <Select \r\n                            disabled={this.props.disabled} \r\n                            value={this.props.mapVar} \r\n                            renderValue={d=>Utils.unCamelCase(d)} \r\n                            onClick={this.props.handleMapVarChange}\r\n                            >\r\n                                {mapVarDropDown}\r\n                            </Select>\r\n                            <FormHelperText id='mapVarInputLabel'>{'Primary Var.'}</FormHelperText>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <FormControl>\r\n                            <Select \r\n                            disabled={this.props.disabled} \r\n                            value={this.props.secondaryVar} \r\n                            renderValue={d=>Utils.unCamelCase(d)} \r\n                            onClick={this.props.handleSecondaryVarChange}\r\n                            >\r\n                                {secondaryVarDropDown}\r\n                            </Select>\r\n                            <FormHelperText id='mapVarInputLabel'>{'Secondary Var.'}</FormHelperText>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <FormControl>\r\n                            <Select \r\n                            disabled={this.props.disabled} \r\n                            value={this.props.tertiaryVar} \r\n                            renderValue={d=>Utils.unCamelCase(d)} \r\n                            onClick={this.props.handleTertiaryVarChange}\r\n                            >\r\n                                {tertiaryVarDropDown}\r\n                            </Select>\r\n                            <FormHelperText id='mapVarInputLabel'>{'Tertiary Var.'}</FormHelperText>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <FormControl>\r\n                            <Select \r\n                            disabled={this.props.disabled} \r\n                            value={this.props.aggregationLevel} \r\n                            renderValue={d=>Utils.unCamelCase(d)} \r\n                            onClick={this.props.toggleAggregateCountys}\r\n                            >\r\n                                {aggregateDropDown}\r\n                            </Select>\r\n                            <FormHelperText id='mapVarInputLabel'>{'Aggregation Level'}</FormHelperText>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    {/* Button group to toggle between aggreggated and unaggregated counties on the map */}\r\n                    <Grid item >\r\n                        <ButtonGroup>\r\n                            <Button \r\n                                color='default'\r\n                                variant='contained'\r\n                                onClick={this.props.resetActiveCountys}\r\n                            >\r\n                                Reset Selection\r\n                            </Button>\r\n                            <Button \r\n                                color='default'\r\n                                variant='contained'\r\n                                onClick={this.props.setAllCountiesActive}\r\n                            >\r\n                                Select All\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Grid>\r\n                </Grid>\r\n                </AppBar>\r\n            </div>\r\n          )\r\n    }\r\n}","import React from \"react\";\r\nimport * as d3 from 'd3';\r\nimport \"../App.css\";\r\nimport CountyStats from \"../modules/CountyStats\";\r\nimport Utils from '../modules/Utils';\r\nimport { mean, sum } from 'simple-statistics';\r\n\r\nexport default class D3Chart extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    static defaultProps = {\r\n        margin: 30,\r\n        marginTop: 5,\r\n        rectPadding: 2,\r\n        data: {},\r\n        covidVar: 'cases',\r\n        perCapita: true\r\n    }\r\n\r\n    create(node){\r\n        d3.select(node).selectAll('svg').remove();\r\n        this.height = node.clientHeight;\r\n        this.width = node.clientWidth;\r\n        this.svg = d3.select(node).append('svg')\r\n            .attr('class','covidTimeLine')\r\n            .attr('width', this.width)\r\n            .attr('height', this.height);\r\n\r\n        this.g = this.svg.append('g')\r\n            .attr('class','chart')\r\n        \r\n        this.setupData();\r\n    }\r\n\r\n    setupData(){\r\n        if(this.props.data.length === undefined || this.props.availableDates.length === undefined){\r\n            return\r\n        }\r\n        //should current set this.data [{key,value...}, {key, value}], this.accessor x=>x[mapVar], this.startDate and this.endDate '4/1/2020'\r\n        var data = CountyStats.activeGroups(this.props.data, this.props.activeCountyGroups);\r\n        var flattenedData = [];\r\n        for(let countyGroup of data){\r\n            let counties = countyGroup.counties;\r\n            for(let county of counties){\r\n                flattenedData.push(county)\r\n            }\r\n        }\r\n        //data should now be an object with keys for each active county\r\n        this.data = flattenedData;\r\n\r\n        //accessor should be county level. add 1 so we can take the logscale easily\r\n        this.accessor = CountyStats.getAccessor(this.props.mapVar, this.props.mapDate);\r\n        this.data.sort((x,y) => this.accessor(x) > this.accessor(y))\r\n\r\n    \r\n    }\r\n\r\n    shouldSetupData(prevProps){\r\n        //when shoudl we update the filtered data?\r\n        //if the data changes\r\n        if(Utils.emptyObject(this.props.data)){\r\n            return false\r\n        }\r\n        if(Utils.emptyObject(prevProps.data)){\r\n            return true\r\n        } \r\n        if(prevProps.data.length !== this.props.data.length){\r\n            return true\r\n        }\r\n        //if the active groups change\r\n        else if(!Utils.arrayEqual(prevProps.activeCountyGroups, this.props.activeCountyGroups)){\r\n            return true\r\n        }\r\n        //otherthings to change\r\n        let propsToCheck = ['mapVar','mapDate','secondaryVar'];\r\n        for(let propKey of propsToCheck){\r\n            if(this.props[propKey] !== prevProps[propKey]){\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    shouldDraw(prevProps){\r\n        return true\r\n    }\r\n\r\n    getPoints(){\r\n        var secondaryAccessor = CountyStats.getAccessor(this.props.secondaryVar, this.props.mapDate)\r\n        var rates = this.data.map(secondaryAccessor);\r\n        var refValues = this.data.map(this.accessor);\r\n        var population = this.data.map(CountyStats.getCountyPopulation);\r\n\r\n        var points = []\r\n        for(let idx in rates){\r\n            let newPoint = {y: rates[idx], x: refValues[idx], pop: population[idx]}\r\n            points.push(newPoint)\r\n        }\r\n        points.sort((x1,x2) => x1.x - x2.x)\r\n\r\n        return points\r\n    }\r\n\r\n    // Function to compute density\r\n    smoothXPoints(points, xMin, xMax, yMin, nPoints){\r\n        var smoothedPoints = [{x: xMin, y: yMin}]\r\n        var windowWidth = (xMax - xMin)/nPoints;\r\n        let windowStart = xMin;\r\n        while(windowStart < xMax){\r\n            let windowEnd = windowStart + windowWidth;\r\n            let window = points.filter(d => d.x > windowStart)\r\n                .filter(d => d.x <= windowEnd);\r\n\r\n            if(window.length > 0){ \r\n                let totalPop = sum( window.map(d => d.pop));\r\n                let xMean = sum( window.map(d => d.x*d.pop) )/totalPop;\r\n                let yMean = sum( window.map(d => d.y*d.pop) )/totalPop;\r\n                let newPoint ={x: xMean, y: yMean, pop: totalPop};\r\n                smoothedPoints.push(newPoint)\r\n            } \r\n            else{\r\n                smoothedPoints.push({x: windowStart, y:yMin, pop: 0})\r\n            }\r\n            windowStart = windowEnd;\r\n        }\r\n        smoothedPoints.push({x: xMax, y: yMin, pop: 0})\r\n        return smoothedPoints\r\n    }\r\n\r\n    getScaleType(xVar){\r\n        if(xVar === 'voting'){\r\n            return d3.scaleLinear()\r\n        } else{\r\n            return d3.scalePow(.5);\r\n        }\r\n    }\r\n\r\n    draw(){\r\n        return\r\n        this.g.selectAll('path').filter('.diffCurve').remove()\r\n        var points = this.getPoints()\r\n\r\n        if(points.length === 0){\r\n            return\r\n        }\r\n\r\n        var xMin = d3.min(points.map(d=>d.x));\r\n        var xMax = d3.max(points.map(d=>d.x));\r\n        var yMin = d3.min(points.map(d=>d.y));\r\n\r\n        points = this.smoothXPoints(points, xMin, xMax, yMin, 40)\r\n        console.log('smothpoint', points)\r\n        let xScale = this.getScaleType(this.props.mapVar)\r\n            .domain([xMin, xMax])\r\n            .range([this.props.margin, this.width - this.props.margin])\r\n\r\n        let yScale = this.getScaleType(this.props.secondaryVar)\r\n            .domain( d3.extent(points.map(d=>d.y)) )\r\n            .range([this.height - this.props.margin , this.props.marginTop])\r\n\r\n        var line = d3.line()\r\n            .x(d=>xScale(d.x))\r\n            .y(d=>yScale(d.y))\r\n            .curve(d3.curveBasis)\r\n\r\n        \r\n        var curve = this.g\r\n            .append('path')\r\n            .attr('class','diffCurve')\r\n            .datum(points)\r\n            .attr('d', line)\r\n            .attr('stroke-width',1)\r\n            .attr('fill-opacity', .25);\r\n        curve.exit().remove()\r\n\r\n        var yAxis = d3.axisLeft(yScale).ticks(5, '.00%');\r\n        var xAxis = d3.axisBottom(xScale).ticks(20, 's')\r\n        this.svg.selectAll('.axis').remove()\r\n        this.svg.append('g')\r\n            .attr('class','axis')\r\n            .attr('id', 'yAxis')\r\n            .attr('transform', 'translate(' + this.props.margin + ',0)' )\r\n            .call(yAxis)\r\n\r\n        let xTransform = this.height - this.props.margin;\r\n        this.svg.append('g')\r\n            .attr('class','axis')\r\n            .attr('id', 'xAxis')\r\n            .attr('transform', 'translate(0,' + xTransform + ')')\r\n            .call(xAxis)\r\n\r\n        this.svg.selectAll('text').filter('.title').remove();\r\n        this.svg.append('text')\r\n            .attr('class','title h6')\r\n            .attr('x', this.width/2)\r\n            .attr('y', this.props.margin-10)\r\n            .html(Utils.unCamelCase(this.props.mapVar));\r\n        var textX = this.width-this.props.margin;\r\n        var textY = this.height/2;\r\n        var textTransform = 'translate(' + textX +',' + textY + ')'\r\n        this.svg.append('text')\r\n            .attr('class','title h6')\r\n            .attr('transform',textTransform+'rotate(90)')\r\n            .attr('width',this.height/2)\r\n            .attr('height','auto')\r\n            .attr('text-anchor', 'middle')\r\n            .html(Utils.unCamelCase(this.props.secondaryVar) )\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.create(\r\n            this._rootNode,\r\n        );\r\n        //first draw\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        return\r\n        if(this.shouldSetupData(prevProps)){\r\n            Utils.wrapError(this.setupData.bind(this),  'Error in CovidTimeLine.setupData');\r\n        }\r\n        if(this.shouldDraw(prevProps)){\r\n            Utils.wrapError(this.draw.bind(this), 'Error in CovidTimeLine.draw');\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n    }\r\n\r\n    _setRef(componentNode){\r\n        this._rootNode = componentNode;\r\n    }\r\n\r\n    render(){\r\n        return <div className='map-container' ref={this._setRef.bind(this)}>\r\n        </div>\r\n    }\r\n}","import React from \"react\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport MapContainer from './components/MapContainer'\r\n// import * as constants from './modules/Constants.js';\r\nimport DataService from './modules/DataService';\r\nimport Utils from './modules/Utils';\r\nimport ControlPanel from './components/ControlPanel';\r\nimport CovidTimeLine from './components/CovidTimeLine';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport \"./App.css\";\r\nimport CountyStats from \"./modules/CountyStats\";\r\n\r\nexport default class App extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.dataService = new DataService();\r\n        this.dataService.test();\r\n\r\n        this.state = {\r\n            mapData: {},\r\n            name: 'vizAtHome',\r\n            mapVar: this.props.defaultMapVar,\r\n            secondaryVar: this.props.defaultSecondaryVar,\r\n            tertiaryVar: this.props.defaultTertiaryVar,\r\n            mapDate: '3/1/20',\r\n            mapIsLoaded: false,\r\n            aggregateCountys: true,\r\n            aggregationLevel: 'groups',\r\n            availableDates: ['3/1/20','4/30/20','7/9/20'],\r\n            activeCountyGroups: [],\r\n        }\r\n    }\r\n\r\n    static defaultProps = {\r\n        defaultMapVar: 'none',\r\n        // defaultMapSpikeVar: 'none',\r\n        defaultSecondaryVar: 'none',\r\n        defaultTertiaryVar: 'none',\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.dataService.getMapData(true).then(data =>{\r\n            this.dataService.getAvailableDates().then(dates => {\r\n                this.setState({mapData: data, availableDates: dates, mapIsLoaded: true})\r\n            })\r\n        })\r\n    }\r\n\r\n    validateMapVar(){\r\n        //makes sure the selected variable to view in the map is somehting we have data one for the map type\r\n        let validVars = Utils.validMapVars();\r\n        if(!Utils.itemInArray(this.state.mapVar, validVars)){\r\n            this.setState({mapVar: validVars[0]})\r\n        }\r\n    }\r\n\r\n    handleMapVarChange(event){\r\n        try{\r\n            let value = event.target.value;\r\n            if(value !== undefined & value !== 0){\r\n                this.setState({mapVar: event.target.value})\r\n            }\r\n        } \r\n        catch{ }\r\n    }\r\n\r\n    toggleActiveCountyGroups(clickedGroup){\r\n        let active = this.state.activeCountyGroups.slice();\r\n        let idx = active.indexOf(clickedGroup);\r\n        if(idx === -1){\r\n            active.push(clickedGroup);\r\n        } else{\r\n            active.splice(idx,1);\r\n        }\r\n        this.setState({activeCountyGroups: active})\r\n    }\r\n\r\n    toggleAggregateCountys(event){\r\n        try{\r\n            let value = event.target.value\r\n            if(value !== undefined & value !== 0){\r\n                var aggregateFlag = (value === 'groups');\r\n                this.setState({aggregationLevel: value, aggregateCountys: aggregateFlag})\r\n            }\r\n        } \r\n        catch{ }\r\n    }\r\n\r\n    handleSecondaryVarChange(event){\r\n        try{\r\n            let value = event.target.value\r\n            if(value !== undefined & value !== 0){\r\n                this.setState({secondaryVar: value})\r\n            }\r\n        } \r\n        catch{ }\r\n    }\r\n\r\n    handleTertiaryVarChange(event){\r\n        try{\r\n            let value = event.target.value\r\n            if(value !== undefined & value !== 0){\r\n                this.setState({tertiaryVar: value})\r\n            }\r\n        } \r\n        catch{ }\r\n    }\r\n\r\n    resetActiveCountys(){\r\n        this.setState({activeCountyGroups: []})\r\n    }\r\n\r\n    setAllCountiesActive(){\r\n        var allCountyGroups = this.state.mapData.map(d=>CountyStats.getCountyGroup(d));\r\n        this.setState({activeCountyGroups: allCountyGroups});\r\n    }\r\n\r\n    handleSliderChange(event, newValue){\r\n        this.dataService.getAvailableDates(true).then(dates =>{\r\n            let newDate = dates[newValue];\r\n            this.setState({mapDate: newDate});\r\n        })\r\n    }\r\n\r\n\r\n    getDefaultMapDateIdx(availableDates){\r\n        return (availableDates.length > 0)? availableDates.length-1: 0;\r\n    }\r\n\r\n    toggleLoading(boolFlag){\r\n        this.setState({mapIsLoaded: boolFlag});\r\n    }\r\n\r\n    async loadData(){\r\n        var tempData = await this.props.dataService.getMapData(true);\r\n        return tempData;\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div className={'component-app'}>\r\n                <CssBaseline/>\r\n                <Grid container direction='row' spacing={4}>\r\n                    <Grid item id={'controlPanel'} className={'flex-center'} xs={12}>\r\n                        <ControlPanel\r\n                            disabled={!this.state.mapIsLoaded}\r\n                            mapVar={this.state.mapVar}\r\n                            secondaryVar={this.state.secondaryVar}\r\n                            tertiaryVar={this.state.tertiaryVar}\r\n                            aggregationLevel={this.state.aggregationLevel}\r\n                            resetActiveCountys={this.resetActiveCountys.bind(this)}\r\n                            setAllCountiesActive={this.setAllCountiesActive.bind(this)}\r\n                            handleMapVarChange={this.handleMapVarChange.bind(this)}\r\n                            toggleAggregateCountys={this.toggleAggregateCountys.bind(this)}\r\n                            handleSecondaryVarChange={this.handleSecondaryVarChange.bind(this)}\r\n                            handleTertiaryVarChange={this.handleTertiaryVarChange.bind(this)}\r\n                        />\r\n                    </Grid>\r\n                    <Grid className={'body'} id={'mapColumn'} container item xs={12}>\r\n                        <Grid item id={'mapBox'} xs={12}>\r\n                            <MapContainer \r\n                            dataService={this.dataService} \r\n                            mapIsLoaded={this.state.mapIsLoaded}\r\n                            toggleLoading={this.toggleLoading.bind(this)}\r\n                            mapVar={this.state.mapVar} \r\n                            secondaryVar={this.state.secondaryVar}\r\n                            tertiaryVar={this.state.tertiaryVar}\r\n                            aggregateCountys={this.state.aggregateCountys}\r\n                            activeCountyGroups={this.state.activeCountyGroups}\r\n                            toggleActiveCountyGroups={this.toggleActiveCountyGroups.bind(this)}\r\n                            mapDate={this.state.mapDate}\r\n                            data={this.state.mapData}\r\n                            availableDates={this.state.availableDates}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item m={0} mt={4} id={'dateSliderBox'} xs={12}>\r\n                            <Typography\r\n                                align={'justify'}\r\n                                gutterBottom={false}\r\n                                variant={'h5'}\r\n                            >\r\n                                Select Date:\r\n                            </Typography>\r\n                            <Slider\r\n                                defaultValue={0}\r\n                                min={0}\r\n                                className={'slider'}\r\n                                disabled={!this.state.mapIsLoaded}\r\n                                max={this.state.availableDates.length -1}\r\n                                marks={Utils.markify(this.state.availableDates, this.state.mapDate)}\r\n                                step={null}\r\n                                valueLabelDisplay='off'\r\n                                onChange={this.handleSliderChange.bind(this)}\r\n                            />\r\n                        </Grid>\r\n                        {/* <Grid item id={'secondaryChart'} xs={12}>\r\n                            <CovidTimeLine \r\n                                dataService={this.dataService} \r\n                                mapVar={this.state.mapVar} \r\n                                secondaryVar={this.state.secondaryVar}\r\n                                covidVar={this.state.tertiaryVar}\r\n                                activeCountyGroups={this.state.activeCountyGroups}\r\n                                mapIsLoaded={this.state.mapIsLoaded}\r\n                                data={this.state.mapData}\r\n                                availableDates={this.state.availableDates}\r\n                                mapDate={this.state.mapDate}\r\n                            />\r\n                        </Grid> */}\r\n                    </Grid>\r\n                </Grid>\r\n                <Backdrop \r\n                    className={'backdrop'} \r\n                    open={!this.state.mapIsLoaded}\r\n                    invisible={this.state.mapIsLoaded}\r\n                >\r\n                    <CircularProgress color='inherit'/>\r\n                </Backdrop>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from\"./App\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}